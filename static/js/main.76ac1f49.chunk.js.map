{"version":3,"sources":["components/GridMDC/GridMDC.js","components/PaperMDC/PaperMDC.js","components/CharCard/CharCard.js","components/Score/Score.js","components/Alert/Alert.js","components/NavBar/NavBar.js","components/BottomNavMDC/BottomNavMDC.js","App.js","registerServiceWorker.js","index.js"],"names":["GridMDC","props","Grid","children","PaperMDC","Paper","CharCard","id","name","image","handlePicked","className","key","data-id","style","backgroundImage","onClick","Score","type","score","Alert","message","NavBar","AppBar","position","Toolbar","Typography","variant","color","align","BottomNavMDC","BottomNavigation","App","state","characters","pickedChars","topScore","alertMessage","event","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","setState","shuffleArray","a","j","x","i","length","Math","floor","random","cb","newState","includes","toUpperCase","push","alertWinner","background","marginBottom","container","direction","margin","maxWidth","item","lg","this","justify","md","sm","xs","spacing","map","char","marginTop","paddingTop","borderTop","href","alt","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.76ac1f49.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst GridMDC = props =>\r\n    <Grid {...props}>\r\n        {props.children}\r\n    </Grid>\r\n\r\nexport default GridMDC;","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst PaperMDC = props => (\r\n    <Paper>\r\n        {props.children}\r\n    </Paper>\r\n)\r\n\r\nexport default PaperMDC;","import React from \"react\";\r\nimport \"./CharCard.css\";\r\n// import { url } from \"inspector\";\r\n\r\nconst CharCard = ({ id, name, image, handlePicked }) => (\r\n    // <div className={`mdc-layout-grid__cell--span-3--order-${Number(id)}`}>\r\n    <div>\r\n        <div\r\n            className=\"card\"\r\n            key={id}\r\n            data-id={id}\r\n            name={name}\r\n            style={{ backgroundImage: `url(${image})` }}\r\n            onClick={handlePicked}\r\n        >\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default CharCard;","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\nconst Score = props => (\r\n    <div className=\"score\">\r\n        {props.type}: {props.score}\r\n    </div>\r\n)\r\n\r\nexport default Score;","import React from 'react';\r\nimport './Alert.css';\r\n\r\nconst Alert = props => (\r\n  <div className='default' style={props.style}>\r\n    {props.message ? (\r\n      <p>{props.message}</p>\r\n    ) : (\r\n      <p className='default-msg black'>\r\n        Jasons Memory Game! How many pictures can you click without reclicking!? What is your strategy??\r\n      </p>\r\n    )}\r\n  </div>\r\n);\r\nexport default Alert;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst NavBar = props => {\r\n    return(\r\n        <div>\r\n        <AppBar position=\"static\" {...props}>\r\n            <Toolbar>\r\n                <Typography variant=\"headline\" color=\"inherit\" align=\"center\">\r\n                Clicky Game\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar;","import React from \"react\";\r\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\r\nimport \"./BottomNavMDC.css\"\r\n\r\nconst BottomNavMDC = props => (\r\n    <BottomNavigation {...props}>\r\n        {props.children}\r\n    </BottomNavigation>\r\n)\r\n\r\nexport default BottomNavMDC;","import React, { Component } from 'react';\nimport GridMDC from \"./components/GridMDC\";\nimport PaperMDC from \"./components/PaperMDC\";\nimport CharCard from \"./components/CharCard\";\nimport Score from \"./components/Score\";\nimport Alert from \"./components/Alert\";\nimport NavBar from \"./components/NavBar\";\nimport BottomNavMDC from \"./components/BottomNavMDC\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    pickedChars: [],\n    topScore: 0,\n    alertMessage: \"\"\n  }\n\n  handlePicked = event => {\n\n    const name = event.target.attributes.getNamedItem(\"name\").value;\n    this.shuffleCharacters()\n    this.checkGuess(name, this.updateTopScore)\n  }\n\n  shuffleCharacters = () => {\n    this.setState(this.state.characters = this.shuffleArray(this.state.characters))\n  }\n\n  shuffleArray = (a) => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  checkGuess = (name, cb) => {\n    const newState = { ...this.state };\n    if (newState.pickedChars.includes(name)) {\n      newState.alertMessage = `Wrong, thats your second time clicking that one! \"${name.toUpperCase()}\"!`\n      newState.pickedChars = []\n      this.setState(this.state = newState)\n    } else {\n      newState.pickedChars.push(name)\n      newState.alertMessage = `Okay, nice choice. Don't pick it again!`\n      this.setState(this.state = newState)\n    }\n    cb(newState, this.alertWinner)\n  }\n\n  updateTopScore = (newState, cb) => {\n    if (newState.pickedChars.length > newState.topScore) {\n      newState.topScore++\n      this.setState(this.state = newState)\n    }\n    cb(newState)\n  }\n\n  alertWinner = (newState) => {\n    if (newState.pickedChars.length === 12) {\n      newState.alertMessage = \"Winner winner dinnery with baby yoda!\";\n      newState.pickedChars = [];\n      this.setState(this.state = newState)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar style={{ background: \"#313133\", marginBottom: \"5px\" }} />\n\n        <GridMDC container direction=\"column\" style={{ margin: \"0 auto\", maxWidth: 945 }}>\n\n          <GridMDC item lg={12}>\n            <PaperMDC>\n              {this.state.alertMessage === \"Nice!\" ? (\n                <Alert message={this.state.alertMessage} style={{ color: \"green\" }} />\n              ) : (\n                  <Alert message={this.state.alertMessage} style={{ color: \"red\" }} />\n                )}\n            </PaperMDC>\n          </GridMDC>\n\n          <GridMDC container justify=\"space-between\">\n\n            <GridMDC item lg={6} md={6} sm={12} xs={12}>\n              <PaperMDC>\n                <Score type=\"Score\" score={this.state.pickedChars.length} />\n              </PaperMDC>\n            </GridMDC>\n\n            <GridMDC item lg={6} md={6} sm={12} xs={12}>\n              <PaperMDC>\n                <Score type=\"Top Score\" score={this.state.topScore} />\n              </PaperMDC>\n            </GridMDC>\n\n          </GridMDC>\n\n        </GridMDC>\n\n        <GridMDC container spacing={24} justify=\"center\" style={{ maxWidth: 945, margin: \"0 auto\" }}>\n          {this.state.characters.map(char => (\n            <GridMDC item lg={3} md={3} sm={4} xs={6}>\n            <CharCard\n              id={char.id}\n              name={char.name}\n              image={char.image}\n              key={char.id}\n              handlePicked={this.handlePicked}\n            />\n            </GridMDC>\n          ))}\n        </GridMDC>\n        <BottomNavMDC style={{ background: \"#313133\", marginTop: \"17.5px\", paddingTop: \"15px\", borderTop: \"2.5px solid slategray\" }}>\n          <a href=\"https://github.com/philiptd5000/clicky-game-REACT\" target=\"_blank\" className=\"link\" alt=\"clicky-game-github-link\"><i className=\"fa fa-github fa-2x\"></i></a>\n        </BottomNavMDC>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}